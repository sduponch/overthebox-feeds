<%
-- Copyright 2016 OVH (OverTheBox@ovh.net)
-- Simon Lelievre (simon.lelievre@corp.ovh.com)
-- Sebastien Duponcheel (sebastien.duponcheel@ovh.net)
-- Martin Wetterwald (martin.wetterwald@corp.ovh.com)
--
-- This file is part of OverTheBox for OpenWrt.
--
--    OverTheBox is free software: you can redistribute it and/or modify
--    it under the terms of the GNU General Public License as published by
--    the Free Software Foundation, either version 3 of the License, or
--    (at your option) any later version.
--
--    OverTheBox is distributed in the hope that it will be useful,
--    but WITHOUT ANY WARRANTY; without even the implied warranty of
--    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
--    GNU General Public License for more details.
--
--    You should have received a copy of the GNU General Public License
--    along with OverTheBox.  If not, see (http://www.gnu.org/licenses/)
-%>

<%+header%>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript" src="<%=resource%>/jquery-1.11.3.min.js"></script>
<script type="text/javascript" src="<%=resource%>/bootstrap.min.js"></script>
<script type="text/javascript" src="<%=resource%>/seedrandom.js"></script>
<script type="text/javascript" src="<%=resource%>/d3.v3.min.js"></script>
<script type="text/javascript" src="<%=resource%>/c3.min.js"></script>

<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/bandwidth.css" />
<link rel="stylesheet" type="text/css" href="<%=resource%>/c3.min.css" />
<link rel="stylesheet" type="text/css" href="<%=resource%>/ovh/css/ovh-common.css">

<script type="text/javascript">
var bandwidth = { };
var oldData = { };
var newData = { };
var period = 5;
var sortingKey = 'rx';
var bit = true;
var nbPointRX = 0;
var nbPointTX = 0;
var historySize = 60;
var hiddenBufferTX = new Array();
var hiddenBufferRX = new Array();

function transformArray(data)
{
    var res = { };
    $.each(data, function(key, val) {
        res[val['mac']] = { };
        res[val['mac']]['tx'] = val['tx'];
        res[val['mac']]['rx'] = val['rx'];
        res[val['mac']]['ip'] = val['ip'];
        res[val['mac']]['hostname'] = val['hostname'];
    });
    return res;
}

function round(number)
{
    return (Math.round((number * 1000)/10)/100);
}

function unitify(number, bit, binary)
{
    // Workaround for Pre ES2015/ES6 browsers
    // They don't support default function parameters
    bit = typeof bit !== 'undefined' ? bit : false;
    binary = typeof binary !== 'undefined' ? binary : false;

    var unitSuffix2 = (bit ? "bit/s" : "B/s");

    var base = (binary ? 1024 : 1000);
    var unitSuffix1 = (binary ? "i" : "");

    var G = Math.pow(base, 3);
    var M = Math.pow(base, 2);
    var k = Math.pow(base, 1);

    if (bit)
    {
        number *= 8;
    }

    if (number >= G)
    {
        return round(number / G) + " G" + unitSuffix1 + unitSuffix2;
    }
    else if (number >= M)
    {
        return round(number / M) + " M" + unitSuffix1 + unitSuffix2;
    }
    else if (number >= k)
    {
        return round(number / k) + (binary ? " K" : " k") + unitSuffix1 + unitSuffix2;
    }
    else
    {
        return number + " " + unitSuffix2;
    }
}

function sortArrayByKey(toSort, lookup, key)
{
    return toSort.sort(function(a, b)
    {
        var x = lookup[a][key];
        var y = lookup[b][key];
        return ((x < y) ? 1 : ((x > y) ? -1 : 0));
    });
}

function computeBandwidth(data)
{
    oldData = newData;
    newData = transformArray(data);

    var res = { };

    $.each(newData, function(key, val)
    {
        res[key] = { };
        if (!(key in oldData))
        {
            res[key]['tx'] = 0;
            res[key]['rx'] = 0;
            res[key]['tx_txt'] = "Gathering data..."
            res[key]['rx_txt'] = "Gathering data..."
        }
        else
        {
            var tx = (newData[key]['tx'] - oldData[key]['tx']);
            var rx = (newData[key]['rx'] - oldData[key]['rx']);

            res[key]['tx'] = (tx >= 0 ? tx / period : bandwidth[key]['tx']);
            res[key]['rx'] = (rx >= 0 ? rx / period : bandwidth[key]['rx']);

            res[key]['tx_txt'] = unitify(res[key]['tx'], bit);
            res[key]['rx_txt'] = unitify(res[key]['rx'], bit);
        }
    });

    bandwidth = res;
}

function macToColor(mac)
{
    Math.seedrandom(mac);
    var rand = Math.random() * Math.pow(255, 3);
    Math.seedrandom();

    color = "rgba(" +
        (rand & 0xFF).toString(10) +  ", " +
        ((rand >> 1 * 8) & 0xFF).toString(10) + ", " +
        ((rand >> 2 * 8) & 0xFF).toString(10) +
        ", 0.4)";
    return color;
}

function highlight(mac)
{
    $('#chartRX').data('chart').focus(mac);
    $('#chartTX').data('chart').focus(mac);
}

function updateHtml()
{
    $.getJSON('<%=build_url("admin/overthebox/lan_traffic_data")%>', "", function(data)
    {
        computeBandwidth(data);

        macs = Object.keys(bandwidth);
        sortArrayByKey(macs, bandwidth, sortingKey);

        var date = new Date();
        var newDataRX = [['x', date]];
        var newDataTX = [['x', date]];

        htmlOutput = "";
        $.each(macs, function(key, val)
        {
            var color = macToColor(val);
            htmlOutput += "<tr class=\"cbi-section-table-row\" onMouseOver=\"highlight('" + val + "');\" onMouseOut=\"highlight('');\">";
            htmlOutput += "<td class=\"cbi-value-field\"><span class=\"legend_square\" style=\"background: " + color + ";\"></span>" + newData[val]['ip'] + "</td>";
            htmlOutput += "<td class=\"cbi-value-field\">" + newData[val]['hostname'] + "</td>";
            htmlOutput += "<td class=\"cbi-value-field\">" + bandwidth[val]['rx_txt'] + "</td>";
            htmlOutput += "<td class=\"cbi-value-field\">" + bandwidth[val]['tx_txt'] + "</td>";
            htmlOutput += "</tr>";

            newDataRX.push([val, bandwidth[val]['rx']]);
            newDataTX.push([val, bandwidth[val]['tx']]);
        });

        // Following code is a work-around because of a bug in c3js
        // https://github.com/c3js/c3/issues/1097
        // If we call chart.flow() method when tab is not focused in browser,
        // points in the past are not popped properly.
        // So we only call flow() when tab is focused.
        if (document.hidden)
        {
            hiddenBufferRX.push(newDataRX);
            hiddenBufferTX.push(newDataTX);
            while (hiddenBufferRX.length > historySize)
            {
                hiddenBufferRX.shift();
            }
            while (hiddenBufferTX.length > historySize)
            {
                hiddenBufferTX.shift();
            }
        }
        else
        {
            $("#bandwidth").html(htmlOutput);

            while (hiddenBufferRX.length > 0)
            {
                $('#chartRX').data('chart').flow({ columns: hiddenBufferRX.shift(), length: ++nbPointRX >= historySize ? 1 : 0 });
            }

            while (hiddenBufferTX.length > 0)
            {
                $('#chartTX').data('chart').flow({ columns: hiddenBufferTX.shift(), length: ++nbPointTX >= historySize ? 1 : 0 });
            }

            $('#chartRX').data('chart').flow({ columns: newDataRX, length: ++nbPointRX >= historySize ? 1 : 0 });
            $('#chartTX').data('chart').flow({ columns: newDataTX, length: ++nbPointTX >= historySize ? 1 : 0 });
        }
    });
}

function initChart(divSelector)
{
    var chart = c3.generate(
    {
        bindto: divSelector,
        data:
        {
            type: "spline",
            x: 'x',
            columns: [ ['x'] ],
            color: function (color, d)
            {
                return macToColor(d.id);
            },
            empty:
            {
                label: { text: "No data" }
            }
        },
        transition: { duration: 0 },
        axis:
        {
            min: { y: 0 },
            x:
            {
                type: 'timeseries',
                tick:
                {
                    format: '%H:%M:%S',
                    outer: false
                }
            },
            y:
            {
                min: 0,
                padding: { top: 20, bottom: 0},
                tick:
                {
                    format: function(d) { return unitify(d, bit); },
                    outer: false
                }
            }
        },
        grid:
        {
            y: { show: true }
        },
        legend:
        {
            show: false
        },
        tooltip:
        {
            show: false,
            grouped: false
        }
    });

    $(divSelector).data('chart', chart);
    return chart;
}

$(document).ready(function()
{
    if (sortingKey == 'rx')
    {
        $('#rx').css('text-decoration', 'underline');
    }
    else if (sortingKey == 'tx')
    {
        $('#tx').css('text-decoration', 'underline');
    }

    initChart("#chartRX");
    initChart("#chartTX");

    updateHtml();
    setInterval(updateHtml, period * 1000);

    $('#rx').click(function()
    {
        sortingKey = 'rx';
        $('#rx').css('text-decoration', 'underline');
        $('#tx').css('text-decoration', 'none');
    });

    $('#tx').click(function()
    {
        sortingKey = 'tx';
        $('#tx').css('text-decoration', 'underline');
        $('#rx').css('text-decoration', 'none');
    });
});

</script>

<h2><%:LAN Traffic%></h2>
<h3><%:Download%></h2>
<div id="chartRX"></div>

<h3><%:Upload%></h2>
<div id="chartTX"></div>

<h2><%:Details%></h2>
<table class="cbi-section-table" style="table-layout:fixed;">
    <thead>
        <tr class="cbi-section-table-titles">
            <th class="cbi-section-table-cell">IP</th>
            <th class="cbi-section-table-cell">Hostname</th>
            <th class="cbi-section-table-cell"><a class="toggle-link" id="rx">Download</a></th>
            <th class="cbi-section-table-cell"><a class="toggle-link" id="tx">Upload</a></th>
        </tr>
    </thead>
    <tbody id="bandwidth">
        <tr class="cbi-section-table-row">
            <td colspan="5">No data</td>
        </tr>
    </tbody>
</table>
<%+footer%>
